# Copyright (c) 2018, ARM Limited.
# SPDX-License-Identifier: Apache-2.0

set(CMAKE_SYSTEM_NAME Linux)
set(CMAKE_SYSTEM_VERSION 1)
set(CMAKE_SYSTEM_PROCESSOR aarch64)
set(CMAKE_CXX_STANDARD 14)

# This assumes that pthread will be available on the target system
# (this emulates that the return of the TRY_RUN is a return code "0"
set(THREADS_PTHREAD_ARG "0"
  CACHE STRING "Result from TRY_RUN" FORCE)

if(NOT DEFINED TOOLCHAIN_PREFIX)
  if (DEFINED ENV{TOOLCHAIN_PREFIX})
    set(TOOLCHAIN_PREFIX $ENV{TOOLCHAIN_PREFIX} CACHE STRING "Tool-chain prefix" FORCE)
  else()
    set(TOOLCHAIN_PREFIX "${CMAKE_SYSTEM_PROCESSOR}-gnu-linux")
  endif()
endif()


if(NOT DEFINED TOOLCHAIN_PATH)
  if(DEFINED ENV{TOOLCHAIN_PATH})
    message(STATUS "TOOLCHAIN_PATH = ENV : $ENV{TOOLCHAIN_PATH}")
    set(TOOLCHAIN_PATH $ENV{TOOLCHAIN_PATH} CACHE STRING "Path to the toolchain path for cross-compilation" FORCE)
  endif()
elseif(NOT DEFINED ENV{TOOLCHAIN_PATH})
  set(ENV{TOOLCHAIN_PATH} ${TOOLCHAIN_PATH})
endif()


if(NOT DEFINED ENV{JETSON_SYS_ROOT})
  message(FATAL_ERROR "JETSON_SYS_ROOT is not specified")
endif()


set(SYSROOT  $ENV{JETSON_SYS_ROOT})

if(DEFINED TOOLCHAIN_PATH)
  set(CMAKE_CXX_COMPILER "${TOOLCHAIN_PATH}/${TOOLCHAIN_PREFIX}-g++")
  set(CMAKE_C_COMPILER "${TOOLCHAIN_PATH}/${TOOLCHAIN_PREFIX}-gcc")
else()
  set(CMAKE_CXX_COMPILER "${TOOLCHAIN_PREFIX}-g++")
  set(CMAKE_C_COMPILER "${TOOLCHAIN_PREFIX}-gcc")
endif()

set(CMAKE_CUDA_HOST_COMPILER ${CMAKE_CXX_COMPILER})

set(CMAKE_EXE_LINKER_FLAGS " -L${SYSROOT}/lib -Wl,--allow-shlib-undefined -Wl,-as-needed")
set(CMAKE_SHARED_LINKER_FLAGS " -L${SYSROOT}/lib -Wl,--allow-shlib-undefined -Wl,-as-needed")


if(NOT DEFINED CUDA_TOOLKIT_ROOT_DIR)
  if(DEFINED ENV{CUDA_TOOLKIT_ROOT})
    message(STATUS "TOOLCHAIN_PATH = ENV : $ENV{TOOLCHAIN_PATH}")
    set(CUDA_TOOLKIT_ROOT_DIR $ENV{CUDA_TOOLKIT_ROOT} CACHE STRING "CUDA path" FORCE)
  else()
    message(FATAL_ERROR "TOOLCHAIN_PATH Variable has to be specified")
  endif()
elseif(NOT DEFINED ENV{CUDA_TOOLKIT_ROOT})
  set(ENV{CUDA_TOOLKIT_ROOT} ${CUDA_TOOLKIT_ROOT_DIR})
endif()

set(CMAKE_FIND_ROOT_PATH ${SYSROOT} $ENV{FLTK_PATH})
set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)
set(CMAKE_FIND_ROOT_PATH_MODE_PACKAGE ONLY)
set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)
set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)


